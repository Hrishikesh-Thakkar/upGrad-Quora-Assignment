openapi: 3.0.1
info:
  description: API of Admin Services
  title: Admin API
  version: 1.0.0
servers:
- url: http://quora.io/api/v1
- url: https://quora.io/api/v1
tags:
- description: All operations marked with 'API#003 Admin' are relevant to the admin
    use case
  name: API#003 Admin
paths:
  /admin/user/{userId}:
    delete:
      description: |
        Admin can delete a user.
      operationId: deleteUser
      parameters:
      - description: Unique identifier of User in a standard UUID format
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: Mandatory user credentials in bearer http authentication scheme
          format.
        in: header
        name: authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
          description: OK- USER SUCCESSFULLY DELETED
        "400":
          content: {}
          description: BAD REQUEST - server cannot or will not process the request
            due to something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              description: Used as correlation id while tracing for the request in
                the backend
              schema:
                type: string
        "401":
          content: {}
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              description: Used as correlation id while tracing for the request in
                the backend
              schema:
                type: string
        "403":
          content: {}
          description: FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              description: Used as correlation id while tracing for the request in
                the backend
              schema:
                type: string
        "422":
          content: {}
          description: UNPROCESSABLE ENTITY - request was well-formed but server unable
            to process due to semantic errors
          headers:
            request-id:
              description: Used as correlation id while tracing for the request flow
                to the backend
              schema:
                type: string
        "500":
          content: {}
          description: INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              description: Used as correlation id while tracing for the request in
                the backend
              schema:
                type: string
      security:
      - BearerAuthorization: []
      summary: userDelete
      tags:
      - API#003 Delete User
      x-accepts: application/json
    x-swagger-router-controller: api
components:
  parameters:
    userId:
      description: Unique identifier of User in a standard UUID format
      in: path
      name: userId
      required: true
      schema:
        type: string
    BearerAuthorization:
      description: Mandatory user credentials in bearer http authentication scheme
        format.
      in: header
      name: authorization
      required: true
      schema:
        type: string
  schemas:
    UserDeleteResponse:
      example:
        id: utr-ret-tret34rwr-ewt
        status: USER SUCCESSFULLY DELETED
      properties:
        id:
          description: uuid of the deleted user
          type: string
        status:
          description: message showing status of the deleted user
          type: string
      required:
      - id
      - status
      type: object
  securitySchemes:
    BearerAuthorization:
      description: |
        Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”
        The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:
        ``` Authorization: Bearer <token>
        ```
        Similarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).
        Read https://jwt.io/introduction/ for more information on JWT standard.
      scheme: basic
      type: http

